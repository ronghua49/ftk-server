import org.gradle.plugins.ide.eclipse.model.SourceFolder
import org.gradle.plugins.ide.eclipse.model.Library
import org.gradle.api.logging.LoggingOutput
import org.gradle.api.logging.StandardOutputListener

buildscript {
	repositories {
		maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
//		maven { url "http://localhost:8081/nexus/content/groups/public" }

	}
	dependencies {
		classpath "org.apache.commons:commons-lang3:3.8.1"
		classpath "net.nemerosa:versioning:2.7.1"
		classpath "com.github.ben-manes:gradle-versions-plugin:0.20.0"
		classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.7'
	}
}

/*
 plugins {
 id 'net.nemerosa.versioning' version '2.6.1'
 id 'com.github.ben-manes.versions' version '0.17.0'
 }
 */
apply plugin: "com.github.ben-manes.versions"
apply plugin: "net.nemerosa.versioning"

project.ext {
	ROOT = [:]
	ROOT.root = project(':').projectDir
	ROOT.lib = new File(ROOT.root, 'lib')
//	ROOT.docroot = new File(ROOT.root, 'docroot')
//	ROOT.doc = ROOT.docroot.path.replaceAll("\\\\","/").replaceAll(":","\\\\:")
//	ROOT.staticFiles = new File(ROOT.docroot,'static')
	version = '1.0-SNAPSHOT'

	ROOT.userHome = System.getProperty("user.home");
	ROOT.properties = new Properties();
	def confFile = file("build.properties")
	if (confFile.exists()) {
		confFile.withInputStream { stream -> ROOT.properties.load(stream) }
	}
//	confFile = file("${ROOT.userHome}/config/sp.properties")
//	if (confFile.exists()) {
//		confFile.withInputStream { stream -> ROOT.properties.load(stream) }
//	}
//	ROOT.uploadFiles = new File(ROOT.properties['file.upload.location'])
}

defaultTasks = ['cleanEclipse', 'eclipse']

dependencyUpdates.revision="release"
dependencyUpdates.outputFormatter="xml"
dependencyUpdates.resolutionStrategy = {
	componentSelection { rules ->
		rules.all { ComponentSelection selection ->
			boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', '_ALPHA', 'incubating'].any { qualifier ->
				selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
			}
			if (rejected) {
				selection.reject('Release candidate')
			}
			def candidate = selection.candidate
			if (candidate.module == 'jsp-api' || candidate.module == 'servlet-api' || candidate.module == 'javax.servlet-api') {
				selection.reject('jsp-api, servlet-api version was fixed!')
			} else if (candidate.module == 'freemarker' && !(candidate.version ==~ /^[.\d]*$/ )) {
				selection.reject('freemarker reject non official version')
			} else if (candidate.group == 'org.ow2.asm' && !(candidate.version ==~ /^[.\d]*$/ )) {
				selection.reject('asm reject non /^[.\\d]*$/ version')
			} else if (candidate.group == 'org.slf4j' && !(candidate.version ==~ /^[.\d]*$/ )) {
				selection.reject('slf4j reject non /^[.\\d]*$/ version')
			} else if (candidate.group == 'org.apache.zookeeper' && !(candidate.version ==~ /^[.\d]*$/ )) {
				selection.reject('zookeeper reject non /^[.\\d]*$/ version')
			} else if (candidate.group == 'org.springframework.security' && !candidate.version.startsWith('4.')) {
				selection.reject('spring security 5+ reject')
			} else if (candidate.group == 'commons-collections' && !candidate.version.startsWith('3.')) {
				selection.reject('commons-collections bad version number: ' + candidate.version)
			}
		}
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse-wtp'
	apply plugin: 'war'
	//	apply plugin: 'com.diffplug.gradle.spotless'

	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	webAppDirName = "WebContent"

	eclipse.project {
		natures 'org.eclipse.wst.common.project.facet.core.nature'
		natures 'org.eclipse.wst.common.modulecore.ModuleCoreNature'
		natures 'org.eclipse.jem.workbench.JavaEMFNature'
		buildCommand 'org.eclipse.wst.common.project.facet.core.builder'
		buildCommand 'org.eclipse.wst.validation.validationbuilder'
	}
	eclipse.classpath {
		defaultOutputDir = file("build-eclipse/main")
		downloadSources = true
		file.whenMerged { classpath ->
			def outputs = [:]
			sourceSets.each { ss ->
				def classesOutput = project.relativePath(ss.output.classesDir).replaceAll("\\\\","/")
				def resourcesOutput = project.relativePath(ss.output.resourcesDir).replaceAll("\\\\","/")
				ss.java.srcDirTrees.each { outputs[project.relativePath(it.dir.absolutePath).replaceAll("\\\\","/")] = classesOutput }
				ss.resources.srcDirTrees.each { outputs[project.relativePath(it.dir.absolutePath).replaceAll("\\\\","/")] = resourcesOutput }
			}
			classpath.entries.each {
				if (it instanceof SourceFolder && outputs.containsKey(it.path)) { it.output = outputs[it.path] }
			}
			classpath.entries.sort { a, b ->
				return a.kind == 'con' ? 1 : b.kind == 'con' ? -1 :
						a.kind == 'lib' && b.kind == 'lib' ? a.path.split('/')[-1] <=> b.path.split('/')[-1]:
						a.kind == 'lib' ? 1 : b.kind == 'lib' ? -1 : a.path<=>b.path
			}
		}
	}

	[compileJava, compileTestJava]*.options.collect { options ->
		options.encoding = 'UTF-8'
	}
	/*	
	 spotless {
	 java {
	 importOrder(['java', 'javax', 'org', 'com'])
	 lineEndings 'WINDOWS'
	 encoding 'UTF-8'
	 }
	 }
	 // */
	dependencies {

		modules {
			module("com.google.collections:google-collections") { replacedBy("com.google.guava:guava") }
			module("log4j:log4j") { replacedBy("org.slf4j:log4j-over-slf4j") }
			module("org.slf4j:slf4j-log4j12") { replacedBy("org.slf4j:log4j-over-slf4j") }
			module("commons-logging:commons-logging") { replacedBy("org.slf4j:jcl-over-slf4j") }
			module("jstl:jstl") { replacedBy("javax.servlet.jsp.jstl:jstl-api") }
			module("asm:asm") {replacedBy("org.ow2.asm:asm")}
		}

//		providedCompile group: 'javax.servlet.jsp', name: 'jsp-api', version: "$jspApiVersion"
//		providedCompile group: 'javax.servlet', name: 'servlet-api', version: "$servletApiVersion"
		providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: "$servletApiVersion"
		providedCompile group: 'javax.servlet.jsp', name: 'javax.servlet.jsp-api', version: "$jspApiVersion"
		
		compile group: 'org.ow2.asm', name: 'asm', version: "$asmVersion"
		compile group: 'org.ow2.asm', name: 'asm-commons', version: "$asmVersion"
		compile group: 'org.ow2.asm', name: 'asm-util', version: "$asmVersion"
		compile group: 'org.ow2.asm', name: 'asm-tree', version: "$asmVersion"
		compile group: 'org.ow2.asm', name: 'asm-analysis', version: "$asmVersion"
		compile group: 'org.ow2.asm', name: 'asm-xml', version: "$asmVersion"
//		compile group: 'org.ow2.asm', name: 'asm-test', version: "$asmVersion"
		

		compile group: 'joda-time', name: 'joda-time', version: "$jodaTimeVersion"
//		compile group: 'org.slf4j', name: 'slf4j-api', version: "$slf4jVersion"
//		compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: "$slf4jVersion"
//		compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: "$slf4jVersion"
//		compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: "$log4j2Version"
//		compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: "$log4j2Version"
//		compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: "$log4j2Version"
//		compile group: 'org.apache.logging.log4j', name: 'log4j-web', version: "$log4j2Version"

		compile group: 'org.apache.commons', name: 'commons-compress', version: "$commonsCompressVersion"
		compile group: 'org.tukaani', name: 'xz', version: '1.8'

		compile group: 'com.alibaba', name: 'dubbo', version: "$dubboVersion"
		
		compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.6.1'
		compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
		
		compile group: 'org.bitcoinj', name: 'bitcoinj-core', version: '0.14.7'
		compile group: 'org.iq80.leveldb', name: 'leveldb', version: '0.10'
		compile group: 'org.fusesource.leveldbjni', name: 'leveldbjni-all', version: '1.8'
		
		compile group: 'org.web3j', name: 'core', version: "$web3jVersion"
		compile group: 'org.web3j', name: 'geth', version: "$web3jVersion"
		compile group: 'org.web3j', name: 'parity', version: "$web3jVersion"
		compile group: 'org.web3j', name: 'utils', version: "$web3jVersion"
		compile group: 'org.web3j', name: 'codegen', version: "$web3jVersion"
		compile group: 'org.web3j', name: 'tuples', version: "$web3jVersion"
		compile group: 'org.web3j', name: 'rlp', version: "$web3jVersion"
		compile group: 'org.web3j', name: 'infura', version: "$web3jVersion"
		compile group: 'org.web3j', name: 'quorum', version: "$web3jVersion"
		compile group: 'org.web3j', name: 'console', version: "$web3jVersion"

		testCompile group: 'com.sun.net.httpserver', name: 'http', version: "20070405"
		testCompile ([group: 'org.springframework', name: 'spring-test', version: "$springVersion"]) { exclude module: 'spring-core' }
		testCompile group: 'junit', name: 'junit', version: "$junitVersion"
		testCompile group: 'com.h2database', name: 'h2', version: "$h2Version"
		testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
		testCompile 'javax.servlet:javax.servlet-api:3.1.0'
		compile group: 'org.apache.commons', name: 'commons-dbcp2', version: "$commonsDbcp2Version"
		testCompile group: 'org.easymock', name: 'easymock', version: "$easymockVersion"

		testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "$springBootVersion"
		
		compile group: 'org.apache.commons', name: 'commons-lang3', version: "$commonsLang3Version"
		compile group: 'commons-io', name: 'commons-io', version: "$commonsIOVersion"
		compile group: 'commons-collections', name: 'commons-collections', version: "$commonsCollectionsVersion"
		compile group: 'org.apache.commons', name: 'commons-collections4', version: "$commonsCollections4Version"
		compile group: 'commons-beanutils', name: 'commons-beanutils', version: "$commonsBeanUtilsVersion"
		
		compile group: 'org.springframework.boot', name: 'spring-boot', version: "$springBootVersion"
//		compile group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: "$springBootVersion"
		compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: "$springBootVersion"
		compile group: 'org.springframework.boot', name: 'spring-boot-starter-cache', version: "$springBootVersion"
		compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: "$springBootVersion"
		compile group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf', version: "$springBootVersion"
		compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: "$springBootVersion"
		compile group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: "$springBootVersion"
		compile group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version: "$springBootVersion"
		compile group: 'org.springframework.boot', name: 'spring-boot-starter-freemarker', version: "$springBootVersion"
		compile group: 'org.springframework.boot', name: 'spring-boot-devtools', version: "$springBootVersion"
		compile group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: "$springBootVersion"
		
	}


	repositories {
		maven { url "https://oss.sonatype.org/content/repositories/releases/" }
		mavenCentral()
		mavenLocal()
		maven { url "https://dl.bintray.com/omni/maven" }
		maven { url "https://dl.bintray.com/msgilligan/maven" }
		jcenter()
//		maven { url "http://localhost:8081/nexus/content/groups/public" }
//		maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
	}

	task cleanLegacyBin {
		delete 'bin'
		delete 'build'
//		delete 'build-eclipse'
		delete 'WebContent/WEB-INF/classes'
	}

	task writeDep {
		doLast {
			delete 'gradle-dependencies.txt'
			def depFile = file('gradle-dependencies.txt');
			def listener = new StandardOutputListener() {
						void onOutput(CharSequence output) {
							depFile << output
						}
					}
			logging.addStandardOutputListener listener
			tasks.dependencies.execute()
			logging.removeStandardOutputListener listener
		}
	}

	task copyJars {
		dependsOn jar
		doLast {
			def jars = [
				provided: [
					from: configurations.providedCompile,
				],
				compile: [
					from: configurations.compile - configurations.providedCompile,
					exclude: []],
				runtime: [
					from: configurations.runtime - configurations.compile,
				],
				test: [
					from: configurations.testCompile - configurations.compile,
				]
			]
			for (entry in jars) {
				entry.value.files = []
				(entry.value.exclude) || (entry.value.exclude = [])
				copy {
					into new File(ROOT.lib,entry.key)
					from entry.value.from
					exclude entry.value.exclude
					eachFile {
						entry.value.files.add it.sourceName
					}
				}
			}
			file("../lib/${project.name}.ant.xml").withPrintWriter {
				def xml = new groovy.xml.MarkupBuilder(it)
				for (entry in jars) {
					xml.patternset(id: "ps." + project.name + "." + entry.key) {
						if (entry.value.files.empty) {
							exclude(name: "*")
						} else {
							entry.value.files.each { jar->
								if (!(jar.startsWith('xml-apis')||jar.startsWith('stax-api'))) {
									include(name: jar)
								}
							}
						}
					}
					entry.value.files.clear()
				}
				it.println()
			}
		}
	}
}
